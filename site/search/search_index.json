{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"LinkedIn Github That's me!! My motivation Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import torch as pt import pytorch_lightning as pl ####################################################################### class FlashModel ( pl . LightningModule ): \"\"\"This defines a MODEL\"\"\" def __init__ ( self , num_layers : int = 3 ): super () . __init__ () self . layer1 = pt . nn . Linear () self . layer2 = pt . nn . Linear () self . layer3 = pt . nn . Linear () class FlashModel ( pl . LightningModule ): \"\"\"This defines a SYSTEM\"\"\" def __init__ ( self , encoder : pt . nn . Module = None , decoder : pt . nn . Module = None ): super () . __init__ () self . encoder = encoder self . decoder = decoder","title":"About me"},{"location":"blogs/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"blogs/algorithms/blog_01292021_hashtables/","text":"Hash Tables Author: Vinay Kumar (@imflash217) | Date: 29/January/2021 Definition Definition Hash Table is a data structure which stores data in an associative manner (i.e. in a (key, value) pair). In a hash table, the data is stored in an array format where each data-value has its own unique index-value. Due to this feature, the access to data becomes very fast if we know the desired index-value; irrespective of the size of the data. Hash Table uses an array as a storage medium and uses hashing to generate the index where an element is to be inserted or to be located from. Hashing Hashing Hashing is a technique to map a range of keys into a range of indexes (usually of an array). A very generic hashing function is modulo operator ( x % y ). Example Example of Hashing Consider a hash-table of size=20 Following ( key , value ) pairs to be stored using the hash-table 1 2 3 4 5 dict = { 9 : 20 , 12 : 70 , 42 : 80 , 7 : 25 , 2 : 21 } Key Hash Array index 9 9 % 20 = 9 9 12 12 % 20 = 12 12 42 42 % 20 = 2 2 7 7 % 20 = 7 7 2 2 % 20 = 2 2 As we can see that a given hashing function can create the same hash-value from two different keys. (in above table keys 42 and 2 ). So we use Linear Probing to resolve conflicts. Linear Probing Linear Probing Linear Probing is a method used to resolve conflicts in the hash-value. It may happen that the hash-function creates an already used index of the array. In such case we search the next empty location of the array by looking into the next cell until we find an empty cell So in our above example, the updated hash-table would map key = 2 to index = 3 : Key Hash Array index 9 9 % 20 = 9 9 12 12 % 20 = 12 12 42 42 % 20 = 2 2 7 7 % 20 = 7 7 2 2 % 20 = 2 3 Search search() method for hash-table Search Delete delete() method for hash-table Delete Python Implementation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class HashTable : def __init__ ( self , table_size ): \"\"\" Args: table_size (int): the size of the hash table. \"\"\" super () . __init__ () self . table_size = table_size self . hash_table = [[] for _ in range ( self . table_size )] ## ! this kind of nested lists DS is useful for CHAINING def hashing_func ( self , key ): \"\"\"Hashing Function Args: key (int): the key Returns: [int]: index of the hash-table \"\"\" hash = key % self . table_size return hash def insert_linear_probing ( self , key , value ): \"\"\" Insert a (key, value) pair in the hash table. Using LINEAR PROBING Args: key (int): the key to be hashed value (any type): value to be stored \"\"\" hash_key = self . hashing_func ( key = key ) if len ( self . hash_table [ hash_key ]) == 0 : self . hash_table [ hash_key ] . append ( value ) else : ## ! collision happened. so search for the available slot pass def insert ( self , key , value ): \"\"\" Insert a (key, value) pair in the hash table. Using TABLE CHAINING Args: key (int): the key to be hashed value (any type): value to be stored \"\"\" hash_key = self . hashing_func ( key = key ) key_exists = False bucket = self . hash_table [ hash_key ] # print(bucket) for i , kv in enumerate ( bucket ): # print(i, kv) k , v = kv if k == key : key_exists = True break if key_exists : bucket [ i ] = ( key , value ) ## ! the original key already exists. So OVERRIDE else : bucket . append (( key , value )) ## ! two different keys COLLIDING. So APPEND using CHAINING def search ( self , key ): \"\"\"Searching for a \"key\" and returning its (key, value) pair Args: key (int): any hashable type (as per the hash function used) Returns: (key, value) pair \"\"\" hash_key = self . hashing_func ( key = key ) bucket = self . hash_table [ hash_key ] for i , kv in enumerate ( bucket ): k , v = kv if k == key : return ( k , v ) def delete ( self , key ): \"\"\"Delete a given key (if present in the hashtable) Args: key ([type]): [description] \"\"\" hash_key = self . hashing_func ( key = key ) bucket = self . hash_table [ hash_key ] key_exists = False for i , kv in enumerate ( bucket ): k , v = kv if k == key : key_exists = True break if key_exists : del bucket [ i ] print ( f \"key = {key} is deleted.\" ) else : print ( f \"key={key} not found.\" ) ########################################################################################## if __name__ == \"__main__\" : import pprint hashtable = HashTable ( table_size = 9 ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 12 , value = \"barry\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 13 , value = \"vinay\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 32 , value = \"flash\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 32 , value = \"flash217\" ) pprint . pprint ( hashtable . hash_table ) ## searching pprint . pprint ( hashtable . search ( key = 32 )) ## deleting hashtable . delete ( key = 13 ) pprint . pprint ( hashtable . hash_table ) ########################################################################################## Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 29/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/ \u21a9 https://www.tutorialspoint.com/python_data_structure/python_hash_table.htm \u21a9 https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm \u21a9 http://blog.chapagain.com.np/hash-table-implementation-in-python-data-structures-algorithms/ \u21a9 https://runestone.academy/runestone/books/published/pythonds/SortSearch/Hashing.html \u21a9 http://paulmouzas.github.io/2014/12/31/implementing-a-hash-table.html \u21a9","title":"Hash Tables"},{"location":"blogs/algorithms/blog_01292021_hashtables/#hash-tables","text":"Author: Vinay Kumar (@imflash217) | Date: 29/January/2021","title":"Hash Tables"},{"location":"blogs/algorithms/blog_01292021_hashtables/#definition","text":"Definition Hash Table is a data structure which stores data in an associative manner (i.e. in a (key, value) pair). In a hash table, the data is stored in an array format where each data-value has its own unique index-value. Due to this feature, the access to data becomes very fast if we know the desired index-value; irrespective of the size of the data. Hash Table uses an array as a storage medium and uses hashing to generate the index where an element is to be inserted or to be located from.","title":"Definition"},{"location":"blogs/algorithms/blog_01292021_hashtables/#hashing","text":"Hashing Hashing is a technique to map a range of keys into a range of indexes (usually of an array). A very generic hashing function is modulo operator ( x % y ).","title":"Hashing"},{"location":"blogs/algorithms/blog_01292021_hashtables/#example","text":"Example of Hashing Consider a hash-table of size=20 Following ( key , value ) pairs to be stored using the hash-table 1 2 3 4 5 dict = { 9 : 20 , 12 : 70 , 42 : 80 , 7 : 25 , 2 : 21 } Key Hash Array index 9 9 % 20 = 9 9 12 12 % 20 = 12 12 42 42 % 20 = 2 2 7 7 % 20 = 7 7 2 2 % 20 = 2 2 As we can see that a given hashing function can create the same hash-value from two different keys. (in above table keys 42 and 2 ). So we use Linear Probing to resolve conflicts.","title":"Example"},{"location":"blogs/algorithms/blog_01292021_hashtables/#linear-probing","text":"Linear Probing Linear Probing is a method used to resolve conflicts in the hash-value. It may happen that the hash-function creates an already used index of the array. In such case we search the next empty location of the array by looking into the next cell until we find an empty cell So in our above example, the updated hash-table would map key = 2 to index = 3 : Key Hash Array index 9 9 % 20 = 9 9 12 12 % 20 = 12 12 42 42 % 20 = 2 2 7 7 % 20 = 7 7 2 2 % 20 = 2 3","title":"Linear Probing"},{"location":"blogs/algorithms/blog_01292021_hashtables/#search","text":"search() method for hash-table Search","title":"Search"},{"location":"blogs/algorithms/blog_01292021_hashtables/#delete","text":"delete() method for hash-table Delete","title":"Delete"},{"location":"blogs/algorithms/blog_01292021_hashtables/#python-implementation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class HashTable : def __init__ ( self , table_size ): \"\"\" Args: table_size (int): the size of the hash table. \"\"\" super () . __init__ () self . table_size = table_size self . hash_table = [[] for _ in range ( self . table_size )] ## ! this kind of nested lists DS is useful for CHAINING def hashing_func ( self , key ): \"\"\"Hashing Function Args: key (int): the key Returns: [int]: index of the hash-table \"\"\" hash = key % self . table_size return hash def insert_linear_probing ( self , key , value ): \"\"\" Insert a (key, value) pair in the hash table. Using LINEAR PROBING Args: key (int): the key to be hashed value (any type): value to be stored \"\"\" hash_key = self . hashing_func ( key = key ) if len ( self . hash_table [ hash_key ]) == 0 : self . hash_table [ hash_key ] . append ( value ) else : ## ! collision happened. so search for the available slot pass def insert ( self , key , value ): \"\"\" Insert a (key, value) pair in the hash table. Using TABLE CHAINING Args: key (int): the key to be hashed value (any type): value to be stored \"\"\" hash_key = self . hashing_func ( key = key ) key_exists = False bucket = self . hash_table [ hash_key ] # print(bucket) for i , kv in enumerate ( bucket ): # print(i, kv) k , v = kv if k == key : key_exists = True break if key_exists : bucket [ i ] = ( key , value ) ## ! the original key already exists. So OVERRIDE else : bucket . append (( key , value )) ## ! two different keys COLLIDING. So APPEND using CHAINING def search ( self , key ): \"\"\"Searching for a \"key\" and returning its (key, value) pair Args: key (int): any hashable type (as per the hash function used) Returns: (key, value) pair \"\"\" hash_key = self . hashing_func ( key = key ) bucket = self . hash_table [ hash_key ] for i , kv in enumerate ( bucket ): k , v = kv if k == key : return ( k , v ) def delete ( self , key ): \"\"\"Delete a given key (if present in the hashtable) Args: key ([type]): [description] \"\"\" hash_key = self . hashing_func ( key = key ) bucket = self . hash_table [ hash_key ] key_exists = False for i , kv in enumerate ( bucket ): k , v = kv if k == key : key_exists = True break if key_exists : del bucket [ i ] print ( f \"key = {key} is deleted.\" ) else : print ( f \"key={key} not found.\" ) ########################################################################################## if __name__ == \"__main__\" : import pprint hashtable = HashTable ( table_size = 9 ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 12 , value = \"barry\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 13 , value = \"vinay\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 32 , value = \"flash\" ) pprint . pprint ( hashtable . hash_table ) hashtable . insert ( key = 32 , value = \"flash217\" ) pprint . pprint ( hashtable . hash_table ) ## searching pprint . pprint ( hashtable . search ( key = 32 )) ## deleting hashtable . delete ( key = 13 ) pprint . pprint ( hashtable . hash_table ) ########################################################################################## Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 29/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Python Implementation"},{"location":"blogs/algorithms/blog_01292021_hashtables/#references","text":"https://www.hackerearth.com/practice/data-structures/hash-tables/basics-of-hash-tables/tutorial/ \u21a9 https://www.tutorialspoint.com/python_data_structure/python_hash_table.htm \u21a9 https://www.tutorialspoint.com/data_structures_algorithms/hash_data_structure.htm \u21a9 http://blog.chapagain.com.np/hash-table-implementation-in-python-data-structures-algorithms/ \u21a9 https://runestone.academy/runestone/books/published/pythonds/SortSearch/Hashing.html \u21a9 http://paulmouzas.github.io/2014/12/31/implementing-a-hash-table.html \u21a9","title":"References"},{"location":"blogs/physics/blog_01282021/","text":"Electromagnetic Spectrum, properties of material medium & its effects. Author: Vinay Kumar (@imflash217) | Date: 28/January/2021 The different parts of the electromagnetic spectrum have very different effects upon interaction with matter. Starting with low frequency radio waves , the human body is quite transparent ( you can listen to your portable radio inside your home since the waves pass freely through the walls of your house and even through the person beside you! ) As you move upward through microwaves and infrared to visible light , you absorb more and more strongly. In the lower ultraviolet range, all the UV from the sun is absorbed in a thin outer layer of your skin. As you move further up into the x-ray region of the spectrum, you become transparent again, because most of the mechanisms for absorption are gone. You then absorb only a small fraction of the radiation, but that absorption involves the more violent ionization events . Each portion of the electromagnetic spectrum has quantum energies appropriate for the excitation of certain types of physical processes. The energy levels for all physical processes at the atomic and molecular levels are quantized, and if there are no available quantized energy levels with spacings which match the quantum energy of the incident radiation, then the material will be transparent to that radiation , and it will pass through. If electromagnetic energy is absorbed, but cannot eject electrons from the atoms of the material, then it is classified as non-ionizing radiation, and will typically just heat the material. Microwaves Microwaves The quantum energy of microwave photons is in the range 0.00001 to 0.001 eV which is in the range of energies separating the quantum states of molecular rotation and torsion . The interaction of microwaves with matter other than metallic conductors ** will be to rotate molecules and produce heat as result of that molecular motion. Conductors will strongly absorb microwaves and any lower frequencies because they will cause electric currents which will heat the material. Most matter, including the human body, is largely transparent to microwaves. High intensity microwaves, as in a microwave oven where they pass back and forth through the food millions of times, will heat the material by producing molecular rotations and torsions. Since the quantum energies are a million times lower than those of x-rays, they cannot produce ionization and the characteristic types of radiation damage associated with ionizing radiation. Infrared Infrared The quantum energy of infrared photons is in the range 0.001 to 1.7 eV which is in the range of energies separating the quantum states of molecular vibrations. Infrared is absorbed more strongly than microwaves, but less strongly than visible light. The result of infrared absorption is heating of the tissue since it increases molecular vibrational activity. Infrared radiation does penetrate the skin further than visible light and can thus be used for photographic imaging of subcutaneous blood vessels. Visible Light Visible Light The primary mechanism for the absorption of visible light photons is the elevation of electrons to higher energy levels. There are many available states, so visible light is absorbed strongly. With a strong light source, red light can be transmitted through the hand or a fold of skin, showing that the red end of the spectrum is not absorbed as strongly as the violet end. While exposure to visible light causes heating, it does not cause ionization with its risks. You may be heated by the sun through a car windshield, but you will not be sunburned - that is an effect of the higher frequency uv part of sunlight which is blocked by the glass of the windshield. Ultraviolet Ultraviolet The near ultraviolet is absorbed very strongly in the surface layer of the skin by electron transitions . As you go to higher energies, the ionization energies for many molecules are reached and the more dangerous photoionization processes take place. Sunburn is primarily an effect of uv, and ionization produces the risk of skin cancer . The ozone layer in the upper atmosphere is important for human health because it absorbs most of the harmful ultraviolet radiation from the sun before it reaches the surface. The higher frequencies in the ultraviolet are ionizing radiation and can produce harmful physiological effects ranging from sunburn to skin cancer . Health concerns for UV exposure are mostly for the range 290-330 nm in wavelength, the range called UVB . According to Scotto, et al , the most effective biological wavelength for producing skin burns is 297 nm . Their research indicates that the biological effects increase logarithmically within the UVB range, with 330 nm being only 0.1% as effective as 297 nm for biological effects. So it is clearly important to control exposure to UVB. X-ray X-men First Header Second Header Since the quantum energies of x-ray photons are much too high to be absorbed in electron transitions between states for most atoms, they can interact with an electron only by knocking it completely out of the atom. That is, all x-rays are classified as ionizing radiation . This can occur by giving all of the energy to an electron ( photoionization ) or by giving part of the energy to the electron and the remainder to a lower energy photon ( Compton Scattering ). At sufficiently high energies, the x-ray photon can create an electron positron pair. Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 28/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References: http://hyperphysics.phy-astr.gsu.edu/hbase/mod3.html \u21a9 http://hyperphysics.phy-astr.gsu.edu/hbase/mod2.html \u21a9 https://physics.stackexchange.com/questions/300551/how-can-wifi-penetrate-through-walls-when-visible-light-cant \u21a9 https://physics.stackexchange.com/questions/1836/why-is-air-invisible \u21a9 https://physics.stackexchange.com/questions/7437/why-is-glass-transparent \u21a9","title":"Electromagnetic Spectrum, properties of material medium & its effects"},{"location":"blogs/physics/blog_01282021/#electromagnetic-spectrum-properties-of-material-medium-its-effects","text":"Author: Vinay Kumar (@imflash217) | Date: 28/January/2021 The different parts of the electromagnetic spectrum have very different effects upon interaction with matter. Starting with low frequency radio waves , the human body is quite transparent ( you can listen to your portable radio inside your home since the waves pass freely through the walls of your house and even through the person beside you! ) As you move upward through microwaves and infrared to visible light , you absorb more and more strongly. In the lower ultraviolet range, all the UV from the sun is absorbed in a thin outer layer of your skin. As you move further up into the x-ray region of the spectrum, you become transparent again, because most of the mechanisms for absorption are gone. You then absorb only a small fraction of the radiation, but that absorption involves the more violent ionization events . Each portion of the electromagnetic spectrum has quantum energies appropriate for the excitation of certain types of physical processes. The energy levels for all physical processes at the atomic and molecular levels are quantized, and if there are no available quantized energy levels with spacings which match the quantum energy of the incident radiation, then the material will be transparent to that radiation , and it will pass through. If electromagnetic energy is absorbed, but cannot eject electrons from the atoms of the material, then it is classified as non-ionizing radiation, and will typically just heat the material.","title":"Electromagnetic Spectrum, properties of material medium &amp; its effects."},{"location":"blogs/physics/blog_01282021/#microwaves","text":"Microwaves The quantum energy of microwave photons is in the range 0.00001 to 0.001 eV which is in the range of energies separating the quantum states of molecular rotation and torsion . The interaction of microwaves with matter other than metallic conductors ** will be to rotate molecules and produce heat as result of that molecular motion. Conductors will strongly absorb microwaves and any lower frequencies because they will cause electric currents which will heat the material. Most matter, including the human body, is largely transparent to microwaves. High intensity microwaves, as in a microwave oven where they pass back and forth through the food millions of times, will heat the material by producing molecular rotations and torsions. Since the quantum energies are a million times lower than those of x-rays, they cannot produce ionization and the characteristic types of radiation damage associated with ionizing radiation.","title":"Microwaves"},{"location":"blogs/physics/blog_01282021/#infrared","text":"Infrared The quantum energy of infrared photons is in the range 0.001 to 1.7 eV which is in the range of energies separating the quantum states of molecular vibrations. Infrared is absorbed more strongly than microwaves, but less strongly than visible light. The result of infrared absorption is heating of the tissue since it increases molecular vibrational activity. Infrared radiation does penetrate the skin further than visible light and can thus be used for photographic imaging of subcutaneous blood vessels.","title":"Infrared"},{"location":"blogs/physics/blog_01282021/#visible-light","text":"Visible Light The primary mechanism for the absorption of visible light photons is the elevation of electrons to higher energy levels. There are many available states, so visible light is absorbed strongly. With a strong light source, red light can be transmitted through the hand or a fold of skin, showing that the red end of the spectrum is not absorbed as strongly as the violet end. While exposure to visible light causes heating, it does not cause ionization with its risks. You may be heated by the sun through a car windshield, but you will not be sunburned - that is an effect of the higher frequency uv part of sunlight which is blocked by the glass of the windshield.","title":"Visible Light"},{"location":"blogs/physics/blog_01282021/#ultraviolet","text":"Ultraviolet The near ultraviolet is absorbed very strongly in the surface layer of the skin by electron transitions . As you go to higher energies, the ionization energies for many molecules are reached and the more dangerous photoionization processes take place. Sunburn is primarily an effect of uv, and ionization produces the risk of skin cancer . The ozone layer in the upper atmosphere is important for human health because it absorbs most of the harmful ultraviolet radiation from the sun before it reaches the surface. The higher frequencies in the ultraviolet are ionizing radiation and can produce harmful physiological effects ranging from sunburn to skin cancer . Health concerns for UV exposure are mostly for the range 290-330 nm in wavelength, the range called UVB . According to Scotto, et al , the most effective biological wavelength for producing skin burns is 297 nm . Their research indicates that the biological effects increase logarithmically within the UVB range, with 330 nm being only 0.1% as effective as 297 nm for biological effects. So it is clearly important to control exposure to UVB.","title":"Ultraviolet"},{"location":"blogs/physics/blog_01282021/#x-ray","text":"X-men First Header Second Header Since the quantum energies of x-ray photons are much too high to be absorbed in electron transitions between states for most atoms, they can interact with an electron only by knocking it completely out of the atom. That is, all x-rays are classified as ionizing radiation . This can occur by giving all of the energy to an electron ( photoionization ) or by giving part of the energy to the electron and the remainder to a lower energy photon ( Compton Scattering ). At sufficiently high energies, the x-ray photon can create an electron positron pair. Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 28/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"X-ray"},{"location":"blogs/physics/blog_01282021/#references","text":"http://hyperphysics.phy-astr.gsu.edu/hbase/mod3.html \u21a9 http://hyperphysics.phy-astr.gsu.edu/hbase/mod2.html \u21a9 https://physics.stackexchange.com/questions/300551/how-can-wifi-penetrate-through-walls-when-visible-light-cant \u21a9 https://physics.stackexchange.com/questions/1836/why-is-air-invisible \u21a9 https://physics.stackexchange.com/questions/7437/why-is-glass-transparent \u21a9","title":"References:"},{"location":"gists/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"gists/lightning/api/configure_optimizers/","text":"pl.LightningModule.configure_optimizers() Code Snippets 1 2 3 4 5 6 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-44 ## ## ! pl.LightningModule.configure_optimizers() ## Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"configure_optimizers()"},{"location":"gists/lightning/api/configure_optimizers/#pllightningmoduleconfigure_optimizers","text":"","title":"pl.LightningModule.configure_optimizers()"},{"location":"gists/lightning/api/configure_optimizers/#code-snippets","text":"1 2 3 4 5 6 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-44 ## ## ! pl.LightningModule.configure_optimizers() ## Author Disclaimer Author: Vinay Kumar (@imflash217) Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/configure_optimizers/#references","text":"","title":"References"},{"location":"gists/lightning/api/forward/","text":"pl.LightningModule.forward() Code Snippets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-46 ## ## ! pl.LightningModule.forward(*args, **kwargs) ## \"\"\" Same as 'torch.nn.Module.forward()' However in Lightning; we want it to define the operations we want to use it during prediction. \"\"\" ################################################################################################### ################################################################################################### # example: if we were using this model as a feature extractor. import torch import pytorch_lightning as pl class FlashModel ( pl . LightningModule ): def forward ( self , x ): feature_maps = self . convnet ( x ) return feature_maps def training_step ( self , batch , batch_idx ): x , y = batch feature_maps = self ( x ) ## ! <-- calls forward() method logits = self . classifier ( feature_maps ) ## TODO: DO something ... return loss ###################### # splitting it this way allows the model to be used as a feature extractor model = FlashModel () inputs = server . get_request () results = model ( inputs ) server . write_results ( results ) ######################################################################################## ######################################################################################## # Using vanilla \"torch.nn.Module\" only. # ! So use \"pl.LightningModule.forward()\" instead of \"torch.nn.Module.forward()\" class Model ( torch . nn . Module ): def forward ( self , batch ): x , y = batch feature_maps = self . convnet ( x ) logits = self . classifier ( feature_maps ) return logits ######################################################################################## ######################################################################################## Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"forward()"},{"location":"gists/lightning/api/forward/#pllightningmoduleforward","text":"","title":"pl.LightningModule.forward()"},{"location":"gists/lightning/api/forward/#code-snippets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-46 ## ## ! pl.LightningModule.forward(*args, **kwargs) ## \"\"\" Same as 'torch.nn.Module.forward()' However in Lightning; we want it to define the operations we want to use it during prediction. \"\"\" ################################################################################################### ################################################################################################### # example: if we were using this model as a feature extractor. import torch import pytorch_lightning as pl class FlashModel ( pl . LightningModule ): def forward ( self , x ): feature_maps = self . convnet ( x ) return feature_maps def training_step ( self , batch , batch_idx ): x , y = batch feature_maps = self ( x ) ## ! <-- calls forward() method logits = self . classifier ( feature_maps ) ## TODO: DO something ... return loss ###################### # splitting it this way allows the model to be used as a feature extractor model = FlashModel () inputs = server . get_request () results = model ( inputs ) server . write_results ( results ) ######################################################################################## ######################################################################################## # Using vanilla \"torch.nn.Module\" only. # ! So use \"pl.LightningModule.forward()\" instead of \"torch.nn.Module.forward()\" class Model ( torch . nn . Module ): def forward ( self , batch ): x , y = batch feature_maps = self . convnet ( x ) logits = self . classifier ( feature_maps ) return logits ######################################################################################## ######################################################################################## Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/forward/#references","text":"","title":"References"},{"location":"gists/lightning/api/freeze/","text":"pl.LightningModule.freeze() Code Snippets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-47 ## ## ! pl.LightningModule.freeze() ## \"\"\" Freezes all parameters for inference. Return: None \"\"\" ################################################################################################### from lightning.api.forward import FlashModel import pytorch_lightning as pl model = FlashModel () model . freeze () ## ! <<- this freezes all model parameters. ################################################################################################### Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"freeze()"},{"location":"gists/lightning/api/freeze/#pllightningmodulefreeze","text":"","title":"pl.LightningModule.freeze()"},{"location":"gists/lightning/api/freeze/#code-snippets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-47 ## ## ! pl.LightningModule.freeze() ## \"\"\" Freezes all parameters for inference. Return: None \"\"\" ################################################################################################### from lightning.api.forward import FlashModel import pytorch_lightning as pl model = FlashModel () model . freeze () ## ! <<- this freezes all model parameters. ################################################################################################### Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/freeze/#references","text":"","title":"References"},{"location":"gists/lightning/api/log/","text":"pl.LightningModule.log() Code Snippets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-47 ## ## ! pl.LightningModule.log() ## \"\"\"Log a (key, value) Args: name ([type]): [description] value ([type]): [description] prog_bar ([type]): [description] logger ([type]): [description] on_step ([type]): [description] on_epoch ([type]): [description] reduce_fx ([type]): [description] tbptt_reduce_fx ([type]): [description] tbptt_pad_token ([type]): [description] enable_graph ([type]): [description] sync_dist ([type]): [description] sync_dist_op ([type]): [description] sync_dist_group ([type]): [description] \"\"\" Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"log()"},{"location":"gists/lightning/api/log/#pllightningmodulelog","text":"","title":"pl.LightningModule.log()"},{"location":"gists/lightning/api/log/#code-snippets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-47 ## ## ! pl.LightningModule.log() ## \"\"\"Log a (key, value) Args: name ([type]): [description] value ([type]): [description] prog_bar ([type]): [description] logger ([type]): [description] on_step ([type]): [description] on_epoch ([type]): [description] reduce_fx ([type]): [description] tbptt_reduce_fx ([type]): [description] tbptt_pad_token ([type]): [description] enable_graph ([type]): [description] sync_dist ([type]): [description] sync_dist_op ([type]): [description] sync_dist_group ([type]): [description] \"\"\" Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/log/#references","text":"","title":"References"},{"location":"gists/lightning/api/test_step/","text":"pl.LightningModule.test_step() Code Snippets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-50 ## ## ! pl.LightningModule.test_step() ## \"\"\" Operates on a single batch of data from the test set. In this step you would normally generate examples or calculate anything of interest such as accuracy. \"\"\" import torch import torchvision import pytorch_lightning as pl # The pseudocode for these calls test_outs = [] for test_batch in test_data : out = test_step ( test_batch ) test_outs . append ( out ) test_epoch_end ( test_outs ) ## if we have one test dataloader def test_step ( self , batch , batch_idx ): pass # if we have multiple test dataloaders def test_step ( self , batch , batch_idx , dataloader_idx ): pass ################################################################################ # Examples: case-1 [a single test dataset] def test_set ( self , batch , batch_idx ): x , y = batch # implement your own out = self ( x ) loss = self . loss ( out , y ) #log 6 example images or generated text or whatever sample_images = x [: 6 ] grid = torchvision . utils . make_grid ( sample_images ) self . logger . experiment . add_image ( \"example_images\" , grid , 0 ) # calculate accuracy labels_hat = torch . argmax ( out , dim = 1 ) test_acc = torch . sum ( y == labels_hat ) . item () / ( len ( y ) * 1.0 ) # log the outputs self . log_dict ({ \"test_loss\" : loss , \"test_acc\" : test_acc }) ################################################################################ # If we pass in multiple test datasets def test_set ( self , batch , batch_idx , dataloader_idx ): \"\"\" dataloader_idx ->> tells which dataset to use during test iterations \"\"\" # TODO: do whatever you want # TODO: ... pass ################################################################################ # NOTE: If you don't need to validate then you don't need to implement this method. # NOTE: When the test_step() is called; the model has been put in EVAL mode and all gradients have been disbaled. # At the end of the test epoch, the model goes back to the training mode and the gradients are enabled. ################################################################################ Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"test_step()"},{"location":"gists/lightning/api/test_step/#pllightningmoduletest_step","text":"","title":"pl.LightningModule.test_step()"},{"location":"gists/lightning/api/test_step/#code-snippets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-50 ## ## ! pl.LightningModule.test_step() ## \"\"\" Operates on a single batch of data from the test set. In this step you would normally generate examples or calculate anything of interest such as accuracy. \"\"\" import torch import torchvision import pytorch_lightning as pl # The pseudocode for these calls test_outs = [] for test_batch in test_data : out = test_step ( test_batch ) test_outs . append ( out ) test_epoch_end ( test_outs ) ## if we have one test dataloader def test_step ( self , batch , batch_idx ): pass # if we have multiple test dataloaders def test_step ( self , batch , batch_idx , dataloader_idx ): pass ################################################################################ # Examples: case-1 [a single test dataset] def test_set ( self , batch , batch_idx ): x , y = batch # implement your own out = self ( x ) loss = self . loss ( out , y ) #log 6 example images or generated text or whatever sample_images = x [: 6 ] grid = torchvision . utils . make_grid ( sample_images ) self . logger . experiment . add_image ( \"example_images\" , grid , 0 ) # calculate accuracy labels_hat = torch . argmax ( out , dim = 1 ) test_acc = torch . sum ( y == labels_hat ) . item () / ( len ( y ) * 1.0 ) # log the outputs self . log_dict ({ \"test_loss\" : loss , \"test_acc\" : test_acc }) ################################################################################ # If we pass in multiple test datasets def test_set ( self , batch , batch_idx , dataloader_idx ): \"\"\" dataloader_idx ->> tells which dataset to use during test iterations \"\"\" # TODO: do whatever you want # TODO: ... pass ################################################################################ # NOTE: If you don't need to validate then you don't need to implement this method. # NOTE: When the test_step() is called; the model has been put in EVAL mode and all gradients have been disbaled. # At the end of the test epoch, the model goes back to the training mode and the gradients are enabled. ################################################################################ Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/test_step/#references","text":"","title":"References"},{"location":"gists/lightning/api/training_step/","text":"pl.LightningModule.training_step() Code Snippets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-55 ## ## ! pl.LightningModule.training_step() ## \"\"\" Here we compute and return the training loss and some additional metrics. In this step you would normally do the forward pass and compute the loss for the batch. We can also do fancier things like multiple forward passes or something model specific. Parameters: batch (Tensor | (Tensor,...) | [Tensor, ...]) ->> The output of the dataloader batch_idx (int) ->> integer displaying the index of this batch optimizer_idx (int) ->> when using multiple optimizers this argument will also be present hiddens (Tensor) ->> Passed if `truncated_bptt_steps > 0` Returns: Any of Tensor (or) ->> The loss tensor dict (or) ->> A dictionary. Can include any keys but MUST include the key \"loss\" None ->> Training will skip to the next batch \"\"\" ## NOTE: The loss value shown in the progress bar is SMOOTHED (i.e. averaged) over its previous values. ## NOTE: So, it differs from the actual lossreturned in training/validation step import torch import pytorch_lightning as pl ################################################################################ class FlashModel ( pl . LightningModule ): def __init__ ( self , encoder , decoder ): super () . __init__ () self . encoder = encoder self . decoder = decoder def training_step ( self , batch , batch_idx ): x , y , z = batch out = self . encoder ( x ) loss = self . loss ( out , x ) return loss ################################################################################ ## ! If we are using MULTIPLE OPTIMIZERS class FlashModel ( pl . LightningModule ): def __init__ ( self , encoder , decoder ): super () . __init__ () self . encoder = encoder self . decoder = decoder def training_step ( self , batch , batch_idx , optimizer_idx ): if optimizer_idx == 0 : ## TODO: do training with encoder pass elif optimizer_idx == 1 : # TODO: DO training with decoder pass ################################################################################ ## ! Truncated BPTT class FlashModel ( pl . LightningModule ): def __init__ ( self , lstm ): super () . __init__ () self . lstm = lstm def training_step ( self , batch , batch_idx , hiddens ): # ! 'hiddens' are the hidden states from the previous truncated backprop step # ... out , hiddens = self . lstm ( data , hiddens ) loss = self . loss ( out , data ) # ... return { \"loss\" : loss , \"hiddens\" : hiddens } ################################################################################ Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references. References","title":"training_step()"},{"location":"gists/lightning/api/training_step/#pllightningmoduletraining_step","text":"","title":"pl.LightningModule.training_step()"},{"location":"gists/lightning/api/training_step/#code-snippets","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 ## 7.4 [LightningModule API] ## 7.4.1 [Methods] ## Page-55 ## ## ! pl.LightningModule.training_step() ## \"\"\" Here we compute and return the training loss and some additional metrics. In this step you would normally do the forward pass and compute the loss for the batch. We can also do fancier things like multiple forward passes or something model specific. Parameters: batch (Tensor | (Tensor,...) | [Tensor, ...]) ->> The output of the dataloader batch_idx (int) ->> integer displaying the index of this batch optimizer_idx (int) ->> when using multiple optimizers this argument will also be present hiddens (Tensor) ->> Passed if `truncated_bptt_steps > 0` Returns: Any of Tensor (or) ->> The loss tensor dict (or) ->> A dictionary. Can include any keys but MUST include the key \"loss\" None ->> Training will skip to the next batch \"\"\" ## NOTE: The loss value shown in the progress bar is SMOOTHED (i.e. averaged) over its previous values. ## NOTE: So, it differs from the actual lossreturned in training/validation step import torch import pytorch_lightning as pl ################################################################################ class FlashModel ( pl . LightningModule ): def __init__ ( self , encoder , decoder ): super () . __init__ () self . encoder = encoder self . decoder = decoder def training_step ( self , batch , batch_idx ): x , y , z = batch out = self . encoder ( x ) loss = self . loss ( out , x ) return loss ################################################################################ ## ! If we are using MULTIPLE OPTIMIZERS class FlashModel ( pl . LightningModule ): def __init__ ( self , encoder , decoder ): super () . __init__ () self . encoder = encoder self . decoder = decoder def training_step ( self , batch , batch_idx , optimizer_idx ): if optimizer_idx == 0 : ## TODO: do training with encoder pass elif optimizer_idx == 1 : # TODO: DO training with decoder pass ################################################################################ ## ! Truncated BPTT class FlashModel ( pl . LightningModule ): def __init__ ( self , lstm ): super () . __init__ () self . lstm = lstm def training_step ( self , batch , batch_idx , hiddens ): # ! 'hiddens' are the hidden states from the previous truncated backprop step # ... out , hiddens = self . lstm ( data , hiddens ) loss = self . loss ( out , data ) # ... return { \"loss\" : loss , \"hiddens\" : hiddens } ################################################################################ Author Disclaimer Author: Vinay Kumar (@imflash217) | Date: 30/January/2021 The contents of this article were originally published at the references below. I have assembled it for my own understanding. Feel free to reuse and tag along the references.","title":"Code Snippets"},{"location":"gists/lightning/api/training_step/#references","text":"","title":"References"},{"location":"hobbies/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"notes/about/","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Pied Piper Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Submit C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C . Welcome to MkDocs For full documentation visit mkdocs.org . Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C . 1 2 nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. 1 2 import torch import pytorch_lightning as pl Deployment 1 git add . && git commit -m \"update\" && git push -u origin main && mkdocs gh-deploy --force Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod \u21a9","title":"About"},{"location":"notes/about/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C . 1 2 nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Welcome to MkDocs"},{"location":"notes/about/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"notes/about/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. 1 2 import torch import pytorch_lightning as pl","title":"Project layout"},{"location":"notes/about/#deployment","text":"1 git add . && git commit -m \"update\" && git push -u origin main && mkdocs gh-deploy --force Lorem ipsum dolor sit amet, consectetur adipiscing elit. \u21a9 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod \u21a9","title":"Deployment"},{"location":"notes/ECE542/ece542_lecture1/","text":"Lecture #1 AI v/s ML v/s DL (Venn Diagram) One-hot-encoding Loss Function What is Machine Learning? It is a field that aims to extract relationships and structures in the data. Example: How to map data to annotations? Loss Function We need a measure to see how well our system is doing at learning. This measure is called Loss Function Sum-of-Squared-Error (SSE): \\(2^2\\) \\(\\sum_{i}||(y_i - f(x_i)||_2^2\\) Training The process of teaching our system to minimize errors is called as Training . Evaluation The process of determining the performance of our trained system over an unseen dataset is called as Evaluation . Unsupervised Learning Generative Models (GAN, AE, RBM) Latent Variable Modeling (PCA, AE) Clustering","title":"Lecture 1"},{"location":"notes/ECE542/ece542_lecture1/#lecture-1","text":"AI v/s ML v/s DL (Venn Diagram) One-hot-encoding Loss Function What is Machine Learning? It is a field that aims to extract relationships and structures in the data. Example: How to map data to annotations? Loss Function We need a measure to see how well our system is doing at learning. This measure is called Loss Function Sum-of-Squared-Error (SSE): \\(2^2\\) \\(\\sum_{i}||(y_i - f(x_i)||_2^2\\) Training The process of teaching our system to minimize errors is called as Training . Evaluation The process of determining the performance of our trained system over an unseen dataset is called as Evaluation . Unsupervised Learning Generative Models (GAN, AE, RBM) Latent Variable Modeling (PCA, AE) Clustering","title":"Lecture #1"},{"location":"projects/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"publications/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"publications/interspeech_2014/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"Interspeech 2014"},{"location":"publications/odyssey_2014/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"Odyssey 2014"},{"location":"work/about/","text":"Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"About"},{"location":"work/aros/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"ARoS Lab, NC State"},{"location":"work/cognizant/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"Cognizant"},{"location":"work/flashai/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"Flash.AI"},{"location":"work/ivmcl/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"iVMCL Lab, NC State"},{"location":"work/meeami/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ##################################################################### ## \u092a\u094d\u0930\u094b\u091c\u0947\u0915\u094d\u091f-\u0936\u093f\u0915\u094d\u0937\u093e ##################################################################### def \u0935\u093f\u092d\u093e\u0917 ( \u092d\u093e\u091c\u094d\u092f , \u092d\u093e\u091c\u0915 ): \u092d\u093e\u0917\u092b\u0932 = 0 \u092d\u093e\u0917 = 1 \u0936\u0947\u0937\u092b\u0932 = 0 print ( f \"-----------------------------------\" ) print ( f \"\u092d\u093e\u091c\u094d\u092f - (\u092d\u093e\u091c\u0915 x \u092d\u093e\u0917) = \u0936\u0947\u0937 [?] \u092d\u093e\u091c\u0915\" ) print ( f \"-----------------------------------\" ) if \u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 : # print raise ValueError ( f \"\u092d\u093e\u091c\u094d\u092f < \u092d\u093e\u091c\u0915 [\u0917\u093c\u0932\u0924 \u0938\u0902\u0916\u094d\u092f\u093e\u090f\u0901 \u0926\u0940 \u0917\u092f\u0940\u0902. \u0915\u0943\u092a\u092f\u093e \u0938\u0939\u0940 \u0938\u0902\u0916\u094d\u092f\u093e \u0905\u0902\u0915\u093f\u0924 \u0915\u0930\u0947\u0902.]\" ) while True : \u0936\u0947\u0937 = \u092d\u093e\u091c\u094d\u092f - ( \u092d\u093e\u091c\u0915 * \u092d\u093e\u0917 ) if \u0936\u0947\u0937 >= \u092d\u093e\u091c\u0915 : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} > {\u092d\u093e\u091c\u0915}\" ) \u092d\u093e\u0917 = \u092d\u093e\u0917 + 1 else : print ( f \"{\u092d\u093e\u091c\u094d\u092f} - ({\u092d\u093e\u091c\u0915} x {\u092d\u093e\u0917}) = {\u0936\u0947\u0937} < {\u092d\u093e\u091c\u0915} .\u0938\u092e\u093e\u092a\u094d\u0924\" ) \u092d\u093e\u0917\u092b\u0932 = \u092d\u093e\u0917 \u0936\u0947\u0937\u092b\u0932 = \u0936\u0947\u0937 print ( f \"-----------------------------------\" ) return { \"\u092d\u093e\u0917\u092b\u0932\" : \u092d\u093e\u0917\u092b\u0932 , \"\u0936\u0947\u0937\u092b\u0932\" : \u0936\u0947\u0937\u092b\u0932 } ##################################################################### lorem ipsum Image caption Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\) , because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\) . The HTML specification is maintained by the W3C .","title":"Meeami Technologies"},{"location":"work/springboard/","text":"","title":"Springboard Inc."}]}